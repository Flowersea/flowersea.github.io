<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go defer return 顺序</title>
      <link href="/post/go-defer-return-shun-xu/"/>
      <url>/post/go-defer-return-shun-xu/</url>
      
        <content type="html"><![CDATA[<p>今天遇到了一道 defer 的题目。题目如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    i <span class="token operator">:=</span> <span class="token number">1</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> i<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>打印结果为：</p><p>2 1</p><p>原因：</p><ol><li><p>多个defer的执行顺序为“后进先出”。</p></li><li><p>所有函数在执行RET返回指令之前，都会先检查是否存在defer语句，若存在则先逆序调用defer语句进行收尾工作再退出返回。</p></li><li><p>匿名返回值是在return执行时被声明，有名返回值则是在函数声明的同时被声明，因此在defer语句中只能访问有名返回值，而不能直接访问匿名返回值。</p></li><li><p>return其实应该包含前后两个步骤：第一步是给返回值赋值（若为有名返回值则直接赋值，若为匿名返回值则先声明再赋值）；第二步是调用RET返回指令并传入返回值，而RET则会检查defer是否存在，若存在就先逆序插播defer语句，最后RET携带返回值退出函数。</p></li></ol><p>参考链接：<a href="https://my.oschina.net/henrylee2cn/blog/505535" target="_blank" rel="noopener">https://my.oschina.net/henrylee2cn/blog/505535</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="/post/xin-de-kai-shi/"/>
      <url>/post/xin-de-kai-shi/</url>
      
        <content type="html"><![CDATA[<p>网上流传的写博客的三个阶段</p><ul><li>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。</li><li>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</li><li>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</li></ul><p>大学时候的第一个博客是用学生优惠在腾讯云上买了域名，服务器，用 wordpress 搭建的。后来觉得维护麻烦，再加上发现了大量好看的博客园，就转而使用<a href="https://www.cnblogs.com/baocong" target="_blank" rel="noopener">博客园</a>了。不过只是一味的写 ACM 题解，退役之后也很少在写技术博客了。</p><p>现在又打算写博客了，这次决定使用更加自由的 github pages，花了一天时间尝试了各种方案之后，最后还是决定使用 hexo。整个搭建过程还是比较简单的。</p><h2 id="尝试了以下方案"><a href="#尝试了以下方案" class="headerlink" title="尝试了以下方案"></a>尝试了以下方案</h2><p>jekyll wu-kan 主题：<a href="http://jekyllthemes.org/themes/wu-kan/" target="_blank" rel="noopener">http://jekyllthemes.org/themes/wu-kan/</a><br>jekyll TeXt 主题：<a href="https://tianqi.name/jekyll-TeXt-theme/docs/zh/quick-start" target="_blank" rel="noopener">https://tianqi.name/jekyll-TeXt-theme/docs/zh/quick-start</a><br>hexo matery 主题（目前使用的）：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a><br>选择 matery 主要还是被卡片式的 ios 风格吸引了。</p><h2 id="Hexo-搭建流程"><a href="#Hexo-搭建流程" class="headerlink" title="Hexo 搭建流程"></a>Hexo 搭建流程</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>在 github 上新建一个仓库，仓库名为 <code>flowersea.GitHub.io</code>，然后 clone 到本地。</p><h3 id="使用-hexo"><a href="#使用-hexo" class="headerlink" title="使用 hexo"></a>使用 hexo</h3><p>安装 nodejs 和 hexo 之后，在任意一个地方新建一个 demo。然后把文件拷贝到仓库中。具体可参考 hexo <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>因为现在 github pages 强制使用 master 分支，所以使用 develop 分支开发，修改 _config.yml 文件，配置发布仓库和分支，然后就能执行发布了。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>Flowersea/flowersea.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre><h3 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h3><p>克隆 matery 主题到 themes 文件夹下，修改 _config.yml 文件中的主题就可以了。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery</code></pre><h3 id="定制"><a href="#定制" class="headerlink" title="定制"></a>定制</h3><p>主要修改了名字、头像、子标题、颜色、描述、图标、横幅，背景，以及删除了一些不必要的功能。</p><h3 id="使用域名"><a href="#使用域名" class="headerlink" title="使用域名"></a>使用域名</h3><p>在腾讯云买一个域名 <code>flowersea.love</code> ，然后配置 CNAME 。同时在 github pages 设置里也设置自定义域名。在网页上设置之后会自动在 master 分支中新建一个 CNAME 文件，但是重新发布会删除 CNAME 文件。解决办法是在开发分支中的 source 文件夹下新建一个 CNAME 文件，里面填写自己的域名，这样发布就不用重新配置了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/hello-world/"/>
      <url>/post/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
